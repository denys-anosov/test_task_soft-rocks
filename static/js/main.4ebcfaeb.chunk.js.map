{"version":3,"sources":["api/api.ts","components/ConfirmDelete/ConfirmDelete.tsx","components/ContactList/ContactList.tsx","components/ContactInfo/ContactInfo.tsx","App.tsx","index.tsx"],"names":["loadUsers","a","fetch","response","json","data","ConfirmDelete","isVisible","setVisibility","onDelete","selectedUserId","className","cn","onClick","event","stopPropagation","type","ContactList","state","id","name","username","email","phone","website","isConfirmationVisible","inputHandler","target","value","setState","prevState","submitHandler","preventDefault","newUser","props","visibleUsers","length","onAdd","setConfirmationVisibility","deleteClickHandler","userId","this","map","user","to","onFindUser","onSubmit","onChange","placeholder","required","React","Component","ContactInfo","currentUser","App","users","addUser","deleteUser","filter","findUserById","foundUser","find","loadedUsers","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4ebcfaeb.chunk.js","sourcesContent":["const BASE_URL = 'https://jsonplaceholder.typicode.com/users';\n\nexport const loadUsers = async () => { // loads users from jsonPlaceHolder\n  const response = await fetch(BASE_URL);\n\n  const data: User[] = await response.json();\n\n  return data;\n};\n","import React from \"react\";\nimport './ConfirmDelete.scss';\nimport cn from 'classnames';\n\ninterface Props {\n  isVisible: boolean,\n  setVisibility: (value: boolean) => void,\n  onDelete: (selectedUserId: number) => void,\n  selectedUserId: number,\n}\n\nexport const ConfirmDelete: React.FC<Props> = ({\n  isVisible,\n  setVisibility,\n  onDelete,\n  selectedUserId,\n}) => {\n\n  const confirmedDeletionHandler = () => {\n    onDelete(selectedUserId);\n    setVisibility(false);\n  };\n  return (\n    <div\n      className={cn(\n        'Popup',\n        { 'Popup Popup--active': isVisible }\n      )}\n      onClick={() => setVisibility(false)}\n    >\n      <div\n        className={cn(\n          'Popup__content',\n          { 'Popup__content Popup__content--active': isVisible }\n        )}\n        onClick={(event) => event.stopPropagation()}>\n        <p className=\"Popup__heading\">Do you confirm deletion?</p>\n        <button\n          className=\"Popup__button\"\n          onClick={() => confirmedDeletionHandler()}\n          type=\"button\"\n        >\n          Yes\n        </button>\n        <button\n          className=\"Popup__button\"\n          type=\"button\"\n          onClick={() => setVisibility(false)}\n        >\n          No\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ConfirmDelete } from '../ConfirmDelete/ConfirmDelete';\nimport './ContactList.scss';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  visibleUsers: User[],\n  onAdd: (newUser: User) => void,\n  onDelete: (selectedUserId: number) => void,\n  onFindUser: (id: number) => void,\n}\n\ninterface State {\n  id: number,\n  name: string,\n  username?: string,\n  email: string,\n  phone?: string,\n  website?: string,\n  isConfirmationVisible: boolean,\n  selectedUserId: number;\n}\n\nexport class ContactList extends React.Component<Props, State> {\n  state: State = {\n    id: 0,\n    name: '',\n    username: '',\n    email: '',\n    phone: '',\n    website: '',\n    isConfirmationVisible: false,\n    selectedUserId: 0,\n  }\n\n  // ties input data to relevant state fields\n  inputHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    this.setState(prevState => ({\n      ...prevState,\n      [name]: value,\n    }))\n  };\n\n  // creates new user after clicking submit button and sends it to App component/state/currentUser\n  submitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newUser = {\n      ...this.state,\n      id: this.props.visibleUsers.length + 1,\n    }\n\n    this.props.onAdd(newUser);\n\n    this.setState({\n      id: 0,\n      name: '',\n      username: '',\n      email: '',\n      phone: '',\n      website: '',\n    })\n  };\n\n  // makes confirmation of deletion visible or invisible with the provided boolean value\n  setConfirmationVisibility = (value: boolean) => {\n    this.setState({\n      isConfirmationVisible: value,\n    })\n  };\n\n  // makes confirmation window visible after clicking the delete button, also sets selectedUserId field in state\n  // with the id of the user next to delete button\n  deleteClickHandler = (userId: number) => {\n    this.setConfirmationVisibility(true);\n    this.setState({\n      selectedUserId: userId,\n    })\n  };\n\n  render() {\n    const {\n      name,\n      username,\n      email,\n      phone,\n      website,\n    } = this.state;\n    return (\n      <>\n        <h1 className=\"Main-heading\">List of users</h1>\n        <div className=\"Main-page\">\n          <ConfirmDelete // passes function and value to control confirmation window visibility through props\n            isVisible={this.state.isConfirmationVisible} // also passes function to delete a user and the id of selected user\n            setVisibility={this.setConfirmationVisibility}\n            onDelete={this.props.onDelete}\n            selectedUserId={this.state.selectedUserId}\n          />\n          <ul className=\"ContactList\">\n            {this.props.visibleUsers.map(user => (\n              <li\n                className=\"ContactList__item\"\n                key={user.id}\n              >\n                <div>\n                  {`${user.id}. `}\n                  {user.name}\n                </div>\n                <div>\n                  <button\n                    className=\"ContactList__button\"\n                    onClick={() => this.deleteClickHandler(user.id)}\n                    type=\"button\"\n                  >\n                    Delete user\n                  </button>\n                  <button // button with link inside to go to contact-info page, where info of selected user is shown\n                    className=\"ContactList__button\"\n                    type=\"button\"\n                  >\n                    <Link\n                      to=\"contact-info\"\n                      onClick={() => this.props.onFindUser(user.id)}\n                      className=\"ContactList__button--link\"\n                    >\n                      More info\n                    </Link>\n                  </button>\n                </div>\n              </li>\n            ))}\n          </ul>\n          <form\n            className=\"Form\"\n            onSubmit={this.submitHandler}\n          >\n            <p className=\"Form__name\">Add new user</p>\n            <input\n              onChange={this.inputHandler}\n              value={name}\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"Name\"\n              required\n            />\n            <input\n              onChange={this.inputHandler}\n              value={username}\n              name=\"username\"\n              type=\"text\"\n              placeholder=\"Username\"\n            />\n            <input\n              onChange={this.inputHandler}\n              value={email}\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n              required\n            />\n            <input\n              onChange={this.inputHandler}\n              value={phone}\n              name=\"phone\"\n              type=\"tel\"\n              placeholder=\"Phone\"\n            />\n            <input\n              onChange={this.inputHandler}\n              value={website}\n              name=\"website\"\n              type=\"text\"\n              placeholder=\"Website\"\n            />\n            <button\n              className=\"Form__button\"\n              type=\"submit\"\n            >\n              Submit\n            </button>\n          </form>\n        </div>\n      </>\n    );\n  }\n}","import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport './ContactInfo.scss'\n\ninterface Props {\n  currentUser: User,\n}\n\nexport const ContactInfo: React.FC<Props> = ({ currentUser }) => { // receives selected user from App/state/currentUser through props\n  const { id, name, username, email, phone, website } = currentUser;\n  return (\n    <>\n      {id ? ( // renders details of the selected user if id is present\n        <div>\n          <ul className=\"ContactInfo__list\">\n            <li>Name: {name}</li>\n            <li>Username: {username}</li>\n            <li>Email: {email}</li>\n            <li>Phone: {phone}</li>\n            <li>Website: {website}</li>\n          </ul>\n        </div>\n      ) : ( // if no id - provides an error message, also when page is refreshed as props are lost and no user selected\n        <div\n          className=\"ContactInfo__error\"\n        >\n          Oops, something went wrong...\n        </div>\n      )}\n      <button // button with a link to redirect to the home page\n        className=\"ContactInfo__button\"\n        type=\"button\"\n      >\n        <Link\n          className=\"ContactInfo__button--link\"\n          to=\"/\"\n        >\n          Go back\n        </Link>\n      </button>\n    </>\n  );\n\n}","import React from 'react';\nimport { loadUsers } from './api/api';\nimport './App.scss';\nimport { ContactList } from './components/ContactList/ContactList';\nimport { ContactInfo } from './components/ContactInfo/ContactInfo';\nimport { Routes, Route, Navigate } from 'react-router-dom';\n\ninterface State {\n  users: User[],\n  currentUser: User,\n}\n\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    users: [],\n    currentUser: {\n      id: 0,\n      name: '',\n      username: '',\n      email: '',\n      phone: '',\n      website: '',\n    },\n  }\n\n  // fetching users from jsonPlaceHolder and saving to state\n  async componentDidMount () {\n    const loadedUsers = await loadUsers();\n\n    this.setState({ users: loadedUsers });\n  }\n\n  // adds new user to state after submitting the form\n  addUser = (newUser: User) => {\n    this.setState(prevState => ({\n      users: [...prevState.users, newUser]\n    }))\n  };\n\n  // filters out the user with provided id from users array in state\n  deleteUser = (selectedUserId: number) => {\n    this.setState(prevState => ({\n      users: [...prevState.users.filter(user => user.id !== selectedUserId)]\n    }))\n  };\n\n  // finds user by provided id and if found - sets it to currentUser field\n  findUserById = (id: number) => {\n    const foundUser = this.state.users\n      .find(user => user.id === id);\n\n    if (foundUser) {\n      this.setState({currentUser: foundUser });\n    }\n  };\n\n  render() {\n    const { users } = this.state;\n\n    return (\n      <main className=\"Container\">\n        <section className=\"App\">\n          <Routes>\n            <Route // on the home page only ContactList component is rendered\n              path=\"/\"\n              element={\n                <ContactList\n                  visibleUsers={users}\n                  onAdd={this.addUser}\n                  onDelete={this.deleteUser}\n                  onFindUser={this.findUserById}\n                />\n              }\n            />\n            <Route // on contact-info page the details of the selected user are rendered\n              path=\"/contact-info\"\n              element={<ContactInfo currentUser={this.state.currentUser}/>}\n            />\n            <Route // if any other string is entered to url - redirects you to home page\n              path=\"*\"\n              element={<Navigate to=\"/\" />}\n            />\n          </Routes>\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}